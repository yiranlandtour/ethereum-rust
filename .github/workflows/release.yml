name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  # Create release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Ethereum Rust ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          body: |
            # Ethereum Rust ${{ steps.version.outputs.version }}
            
            ## What's Changed
            - Single Slot Finality (12-second finality)
            - History Expiry (EIP-4444)
            - Enhanced zkEVM integration
            - Quantum-resistant signatures
            - Performance improvements
            
            ## Downloads
            See artifacts below for your platform.
            
            ## Docker
            ```bash
            docker pull ethereum/rust-ethereum:${{ steps.version.outputs.version }}
            ```

  # Build and upload release artifacts
  release-artifacts:
    name: Release Artifacts
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: ethereum-rust
            archive: tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact: ethereum-rust
            archive: tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: ethereum-rust
            archive: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: ethereum-rust
            archive: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: ethereum-rust.exe
            archive: zip
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
      
      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }} --all-features
      
      - name: Package (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ethereum-rust-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz ${{ matrix.artifact }}
          mv ethereum-rust-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz ../../../
      
      - name: Package (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a -tzip ethereum-rust-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.zip ${{ matrix.artifact }}
          mv ethereum-rust-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.zip ../../../
      
      - name: Upload Release Asset (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./ethereum-rust-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz
          asset_name: ethereum-rust-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip
      
      - name: Upload Release Asset (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./ethereum-rust-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.zip
          asset_name: ethereum-rust-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.zip
          asset_content_type: application/zip

  # Docker release
  docker-release:
    name: Docker Release
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ethereum/rust-ethereum:latest
            ethereum/rust-ethereum:${{ needs.create-release.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Publish to crates.io
  publish-crates:
    name: Publish to crates.io
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Publish crates
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          # Publish in dependency order
          cargo publish -p ethereum-types --allow-dirty || true
          cargo publish -p ethereum-crypto --allow-dirty || true
          cargo publish -p ethereum-core --allow-dirty || true
          sleep 30
          cargo publish -p ethereum-storage --allow-dirty || true
          cargo publish -p ethereum-consensus --allow-dirty || true
          cargo publish -p ethereum-evm --allow-dirty || true
          sleep 30
          cargo publish -p ethereum-network --allow-dirty || true
          cargo publish -p ethereum-rpc --allow-dirty || true
          cargo publish -p ethereum-rust --allow-dirty || true